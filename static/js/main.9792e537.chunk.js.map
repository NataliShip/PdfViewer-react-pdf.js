{"version":3,"sources":["components/Upload/Upload.tsx","components/PdfViewer/PdfViewer.tsx","index.tsx","components/App.tsx","../node_modules/pdfjs-dist/build sync","../node_modules/pdfjs-dist/lib/display sync"],"names":["Upload","state","error","isLoading","input","React","createRef","onChangeHandler","evt","props","afterUploadAction","maxSizeInKB","file","target","files","type","fileReader","FileReader","accept","indexOf","setState","sizeInKB","size","isPdf","onload","fileContent","result","fileObject","readAsDataURL","this","label","className","onChange","join","ref","onClick","current","click","Component","defaultProps","pdfjs","GlobalWorkerOptions","workerSrc","pdfjsWorker","PdfViewer","pdf","testFileContent","pagesCount","currentPageNumber","onCatchErrorReloadedCount","switchPageBlocked","scale","isPdfLoaded","isShowError","pdfLoadingError","isPageRendering","wrap","document","canvas","textAndAnnotationLayer","throttledChangeDocumentSize","fetchPdf","src","a","async","loadingTask","getDocument","promise","numPages","pageRendering","getPage","page","getScaleForCurrentWidth","getViewport","viewport","height","width","context","getContext","renderContext","canvasContext","renderTask","render","getTextContent","textContent","innerHTML","renderTextLayer","container","textDivs","PDFLinkService","externalLinkTarget","LinkTarget","BLANK","linkService","AnnotationLayerBuilder","pageDiv","pdfPage","l10n","NullL10n","switchPageHandler","next","newPageNumber","toggleFullScreenHandler","el","screenfull","toggle","afterUpload","then","catch","throttle","window","addEventListener","removeEventListener","nextProps","link","newScale","clientWidth","isFullscreen","clientHeight","sandbox","download","href","isEnabled","isMobile","any","ReactDOM","process","getElementById","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id"],"mappings":"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","file":"static/js/main.9792e537.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { UploadPropsTypes, UploadStateTypes } from './types'\nimport './upload.sass'\n\nclass Upload extends Component<UploadPropsTypes, UploadStateTypes> {\n  static propTypes = {\n    maxSizeInKB: PropTypes.number,\n    label: PropTypes.string,\n    accept: PropTypes.array,\n    afterUploadAction: PropTypes.func,\n  }\n\n  static defaultProps = {\n    label: 'Загрузить',\n    maxSizeInKB: 0\n  }\n\n  state = {\n    error: null,\n    isLoading: false\n  }\n\n  private input = React.createRef<HTMLInputElement>()\n\n  onChangeHandler = (evt) => {\n    const { afterUploadAction, maxSizeInKB } = this.props\n\n    const file = evt.target.files[0]\n    const type = file.type\n    const fileReader = new FileReader()\n\n    if (evt.target.accept.indexOf(type) < 0) {\n      this.setState({ error: 'Неверный тип файла', isLoading: false })\n      return false\n    }\n\n    const sizeInKB = file.size / 1024\n    if (maxSizeInKB && sizeInKB > maxSizeInKB) {\n      this.setState({ error: 'Слишком большой размер файла', isLoading: false })\n      return false\n    }\n\n    this.setState({ error: null, isLoading: true })\n\n    const isPdf = file.type === 'application/pdf'\n\n    if (isPdf) {\n      this.setState({ error: null, isLoading: false })\n\n      fileReader.onload = () => {\n        if (afterUploadAction) afterUploadAction({ fileContent: fileReader.result, fileObject: file, isPdf })\n      }\n\n      fileReader.readAsDataURL(file)\n\n      return\n    }\n\n    fileReader.readAsDataURL(file)\n  }\n\n  render () {\n    const { label, accept } = this.props\n    const { error, isLoading } = this.state\n\n    return (\n      <div className='upload'>\n        { isLoading\n          ? <span>Downloading...</span>\n          : <div className='holder'>\n            <input\n              onChange={this.onChangeHandler}\n              className='input'\n              accept={accept.join(', ')}\n              type='file'\n              ref={this.input}\n            />\n            <button\n              className='btn'\n              onClick={() => { this.input.current.click() }}\n            >\n              {label}\n            </button>\n          </div>\n        }\n      { error && <div className='error'>{error}</div> }\n      </div>\n    )\n  }\n}\n\nexport default Upload\n","import React, {Component, Fragment} from 'react'\nimport PropTypes from 'prop-types'\nimport pdfjs from 'pdfjs-dist'\nimport pdfjsWorker from 'pdfjs-dist/build/pdf.worker.entry'\nimport { AnnotationLayerBuilder } from 'pdfjs-dist/lib/web/annotation_layer_builder'\nimport { PDFLinkService } from 'pdfjs-dist/lib/web/pdf_link_service'\nimport NullL10n from 'pdfjs-dist/lib/web/ui_utils.js'\nimport screenfull from 'screenfull'\nimport isMobile from 'ismobilejs'\nimport throttle from 'lodash/throttle'\nimport {\n  PdfViewerPropsTypes,\n  PdfViewerStateTypes,\n  pageType\n} from './types'\nimport Upload from '../Upload/Upload'\nimport './pdfViewer.sass'\n\npdfjs.GlobalWorkerOptions.workerSrc = pdfjsWorker\n\nconst MAX_RELOAD_COUNT_ON_ERROR = 2\n\nclass PdfViewer extends Component<PdfViewerPropsTypes, PdfViewerStateTypes> {\n  static propTypes = {\n    src: PropTypes.string,\n    sandbox: PropTypes.bool\n  }\n\n  state: PdfViewerStateTypes = {\n    pdf: null,\n    testFileContent: null,\n    pagesCount: 0,\n    currentPageNumber: 1,\n    onCatchErrorReloadedCount: 0,\n    switchPageBlocked: false,\n    scale: 1,\n    isPdfLoaded: false,\n    isShowError: false,\n    pdfLoadingError: false\n  }\n\n  isPageRendering = false\n\n  private wrap = React.createRef<HTMLDivElement>()\n  private document = React.createRef<HTMLDivElement>()\n  private canvas = React.createRef<HTMLCanvasElement>()\n  private textAndAnnotationLayer = React.createRef<HTMLDivElement>()\n  throttledChangeDocumentSize\n\n  componentDidMount () {\n    this.fetchPdf(this.props.src)\n        .then(() => this.pageRendering())\n        .catch(() => this.setState({pdfLoadingError: true}))\n\n    this.throttledChangeDocumentSize = throttle(this.pageRendering, 100)\n    window.addEventListener('resize', this.throttledChangeDocumentSize)\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.throttledChangeDocumentSize)\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (nextProps.src !== this.props.src) {\n      this.setState({\n        isShowError: false,\n        pdfLoadingError: false,\n        pdf: null,\n        testFileContent: null,\n        currentPageNumber: 1,\n        pagesCount: 0\n      })\n      // отрисовываем новый pdf\n      this.fetchPdf(nextProps.link)\n        .then(() => this.pageRendering())\n        .catch(() => this.setState({pdfLoadingError: true}))\n    }\n  }\n\n  componentDidCatch () {\n    const { onCatchErrorReloadedCount } = this.state\n    // если по каким-то причинам происходит эксепшн, то перезагружаем документ\n    // и он будет загружен на текущей странице, если попытки закончились, показываем ошибку\n\n    if (onCatchErrorReloadedCount < MAX_RELOAD_COUNT_ON_ERROR) {\n      this.setState({ onCatchErrorReloadedCount: onCatchErrorReloadedCount + 1 })\n    } else {\n      this.setState({ isShowError: true })\n    }\n  }\n\n  private fetchPdf = async (src: string) => {\n    const loadingTask = pdfjs.getDocument(src)\n    const pdf = await loadingTask.promise\n    this.setState({pdf, isPdfLoaded: true, pagesCount: pdf.numPages})\n  }\n\n  private pageRendering = async () => {\n    if (this.isPageRendering) return\n    this.setState({switchPageBlocked: true})\n    this.isPageRendering = true\n\n    const {state: { currentPageNumber, pdf }} = this\n\n    if (!pdf) return\n    const page: pageType = await pdf.getPage(currentPageNumber)\n\n    // подготовка canvas по размерам pdf при выбранном scale\n    const scale = this.getScaleForCurrentWidth(page)\n    const viewport = await page.getViewport({scale})\n    this.canvas.current.height = viewport.height\n    this.canvas.current.width = viewport.width\n\n    // рендерим страницу pdf в контекст canvas\n    const context = this.canvas.current.getContext('2d')\n    const renderContext = {\n      canvasContext: context,\n      viewport: viewport\n    }\n    const renderTask = page.render(renderContext)\n    await renderTask.promise\n\n    // получаем текстовое содержимое pdf\n    const textContent = await page.getTextContent()\n    this.textAndAnnotationLayer.current.innerHTML = ''\n\n    // рендерим текст из pdf\n    pdfjs.renderTextLayer({\n      textContent: textContent,\n      container: this.textAndAnnotationLayer.current,\n      viewport: viewport,\n      textDivs: []\n    })\n\n    // рендерим аннотации\n    // необходимо рендерить текст и аннотации в один слой иначе слои перекрывают друг друга\n    const linkService = await new PDFLinkService({\n      // для того что бы ссылки открывались в новой вкладке, по умолчанию NONE\n      externalLinkTarget: pdfjs.LinkTarget.BLANK\n    })\n\n    const annotation = new AnnotationLayerBuilder({\n      pageDiv: this.textAndAnnotationLayer.current,\n      linkService: linkService,\n      pdfPage: page,\n      l10n: NullL10n\n    })\n    annotation.render(viewport)\n\n    this.setState({switchPageBlocked: false})\n    this.isPageRendering = false\n  }\n\n  private getScaleForCurrentWidth (page) {\n    // это необходимо так как размеры canvas, textLayer и annotationLayer зависят от viewport\n    // поэтому что бы canvas и другие слои были правильных размеров нужно вычислить scale\n    // вычисляю по пропорции опираясь на ширину или высоту\n    const viewport = page.getViewport({scale: this.state.scale})\n    let newScale = this.state.scale\n\n    if (this.wrap.current.clientWidth === viewport.width) return newScale\n\n    // @ts-ignore\n    // screenfull library not support types\n    if (screenfull.isFullscreen && viewport.width / viewport.height < 1.5) {\n      newScale = this.wrap.current.clientHeight / viewport.height * this.state.scale\n    } else {\n      newScale = this.wrap.current.clientWidth / viewport.width * this.state.scale\n    }\n\n    this.setState({scale: newScale})\n    return newScale\n  }\n\n  private switchPageHandler = (next = false) => {\n    const { currentPageNumber, pagesCount, switchPageBlocked } = this.state\n\n    if (switchPageBlocked) return\n\n    let newPageNumber = next ? currentPageNumber + 1 : currentPageNumber - 1\n    if (newPageNumber < 1) newPageNumber = 1\n    if (newPageNumber > pagesCount) newPageNumber = pagesCount\n\n    this.setState(\n      { currentPageNumber: newPageNumber, switchPageBlocked: currentPageNumber !== newPageNumber },\n      () => this.pageRendering()\n    )\n  }\n\n  private toggleFullScreenHandler = () => {\n    const el = this.wrap.current\n\n    if (!el) return\n\n    // @ts-ignore\n    // screenfull library not support types\n    screenfull.toggle(el)\n  }\n\n  afterUpload = ({ fileContent }) => {\n    this.setState({ testFileContent: fileContent, pdfLoadingError: false })\n    this.fetchPdf(fileContent)\n      .then(() => this.pageRendering())\n  }\n\n  render(): React.ReactElement {\n    const { sandbox, src } = this.props\n    const {\n      isShowError,\n      isPdfLoaded,\n      pdfLoadingError,\n      testFileContent,\n      switchPageBlocked,\n      pagesCount,\n      currentPageNumber\n    } = this.state\n\n    const file = sandbox ? testFileContent : src\n\n    if (isShowError) {\n      return (\n        <div className='root'>\n          Произошла ошибка при просмотре документа\n        </div>\n      )\n    }\n\n    if (pdfLoadingError && !sandbox) {\n      return (\n        <div className='root'>\n          Не удалось загрузить pdf файл\n        </div>\n      )\n    }\n\n    return (\n      <div className='root'>\n        {\n          sandbox && !testFileContent &&\n          <div className='sandbox'>\n            <p><strong>Sandbox</strong></p>\n            <Upload\n              afterUploadAction={this.afterUpload}\n              maxSizeInKB={1000000000}\n              accept={['application/pdf']}\n              label='Выберите PDF документ'\n            />\n          </div>\n        }\n        {\n          isPdfLoaded\n          ? <div className='wrap' ref={this.wrap}>\n              <div className='document' ref={this.document}>\n                <canvas className='canvas' ref={this.canvas} />\n                <div className='textAndAnnotationLayer' ref={this.textAndAnnotationLayer} />\n\n                <div className='controls'>\n                  <div className='leftControls'>\n                    {\n                      pagesCount > 1 && (\n                        <Fragment>\n                          <div className='previous' onClick={() => !switchPageBlocked ? this.switchPageHandler() : null} />\n\n                          <div className='next' onClick={() => !switchPageBlocked ? this.switchPageHandler(true) : null} />\n                        </Fragment>\n                      )\n                    }\n                    <div className='pages'>Страница {currentPageNumber} из {pagesCount}</div>\n                  </div>\n\n                  <div className='rightControls'>\n                    <a className='download' download href={file} />\n\n                    {\n                      // @ts-ignore\n                      screenfull.isEnabled && !isMobile('any').any && <div className='fullscreen' onClick={this.toggleFullScreenHandler} />\n                    }\n                  </div>\n                </div>\n              </div>\n            </div>\n            : !sandbox && <div>Идет загрузка документа...</div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default PdfViewer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","import React from 'react'\nimport PdfViewer from './PdfViewer/PdfViewer'\n\nexport default function App () {\n  return (\n    <main>\n      <h1 className='header'>\n        Sandbox - download your pdf to try viewer\n      </h1>\n      <PdfViewer sandbox />\n\n      <h1 className='header'>\n        PdfViewer React wrap component for Pdf.js library\n      </h1>\n      <PdfViewer src={`${process.env.PUBLIC_URL}/test.pdf`} />\n    </main>\n  )\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 38;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 46;"],"sourceRoot":""}